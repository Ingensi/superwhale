#!/usr/bin/ruby

# Dependencies
require 'yaml'
require 'filewatcher'
require 'logger'

# Folders constants
PATHS = {
    superwhale: '/etc/superwhale.d',
    haproxy: '/etc/haproxy',
    hosts: '/etc/hosts'
}

# SuperWhale constants
SUPERWHALE = {
    version: '2.1.0',
    config: YAML.load_file("#{PATHS[:superwhale]}/configs/superwhale.yml"),
    services: "#{PATHS[:superwhale]}/services/*.yml",
    https_cert: "#{PATHS[:superwhale]}/configs/https.pem",
    failed_services: []
}

# HAProxy constants
HAPROXY = {
    binary: '/usr/sbin/haproxy',
    debug_flag: '-d',
    header: "#{PATHS[:superwhale]}/configs/header.cfg",
    config: "#{PATHS[:haproxy]}/haproxy.cfg"
}

# Logging helper
LOGGER = Logger.new(STDOUT)
LOGGER.level = case SUPERWHALE[:config]['log_level']
                 when 'debug'
                   Logger::DEBUG
                 when 'info'
                   Logger::INFO
                 when 'warning'
                   Logger::WARN
                 else
                   Logger::WARN
               end

# Checks if a host exists in /etc/hosts file
def hosts_exists?(hostname)
  hosts = File.read PATHS[:hosts]
  hosts.include? "\t#{hostname}\n"
end

def compile_haproxy_config(frontend_directives, backend_blocks)
  # Loading header of haproxy configuration file
  haproxy_cfg = File.read HAPROXY[:header]

  # Compiling frontend block
  haproxy_cfg << "\n\nfrontend public\n"
  frontend_directives.each do |directive|
    haproxy_cfg << "  #{directive}\n"
  end

  # Compiling backend blocks
  backend_blocks.each do |name, directives|
    haproxy_cfg << "\nbackend #{name}_backend\n"
    directives.each do |directive|
      haproxy_cfg << "  #{directive}\n"
    end
  end

  haproxy_cfg
end


# Create HAProxy configuration from superwhale services
def create_haproxy_config

  LOGGER.info 'Parsing configurations'

  # Frontend block
  frontend_directives = []
  frontend_directives << 'bind *:80'
  # Add custom frontend directives
  SUPERWHALE[:config]['frontend_options'].each do |directive|
      frontend_directives << directive
  end if SUPERWHALE[:config]['frontend_options']
  # Frontend HTTPS management
  if File.exist? SUPERWHALE[:https_cert]
    LOGGER.info 'Certificate found, activating SSL'
    frontend_directives << "bind *:443 ssl crt #{SUPERWHALE[:https_cert]}"

    if SUPERWHALE[:config]['force_ssl']

      LOGGER.info 'Forcing HTTPS over HTTP'

      https_domain_exclusion = ''
      SUPERWHALE[:config]['ssl_noforce_domain'].each do |domain|
        https_domain_exclusion << "!{ hdr(host) -i #{domain} } "
        LOGGER.info "Excluding #{domain} from HTTPS forcing"
      end if SUPERWHALE[:config].has_key? 'ssl_noforce_domain'

      frontend_directives << "redirect scheme https if !{ ssl_fc } #{https_domain_exclusion}"
    end
  end

  # Backend blocks
  backend_blocks = {}

  # Iterating on services
  default_backend_found = false
  Dir[SUPERWHALE[:services]].each do |file|
    begin
      services = YAML.load_file file
      services.each do |name, options|
        LOGGER.debug "Parsing service #{name} : #{options.to_s}"

        # Checking if a service is using the same name
        if backend_blocks.has_key?(name)
          LOGGER.fatal 'Multiple services are using the same name, can\'t continue !'
          exit 11
        end

        # Parsing and iterating on hosts of current service
        hosts = []
        LOGGER.info "Configuring and adding #{name} service : "
        options['backends'].each do |backend|
          if hosts_exists? backend['host']
            hosts << backend
            LOGGER.info "[Service/#{name}] Adding #{name}/#{backend['host']}"
          else
            LOGGER.warn "[Service/#{name}] Skipping #{name}/#{backend['host']}, can't found it in /etc/hosts"
          end
        end
        if hosts.count == 0
          LOGGER.warn "No host available for service #{name} : skipping it"
          SUPERWHALE[:failed_services] << name unless SUPERWHALE[:failed_services].include? name
          next
        else
          if SUPERWHALE[:failed_services].include? name
            LOGGER.warn "Service #{name} is now available again"
            SUPERWHALE[:failed_services].delete name
          else
            LOGGER.info "Service #{name} loaded"
          end
        end

        # Configuring service in frontend block
        frontend_directives << "acl host_#{name} hdr(host) -i #{options['domain_name']}"
        frontend_directives << "use_backend #{name}_backend if host_#{name}"
        if options['is_default']
          if default_backend_found
            LOGGER.fatal 'Multiple default backend in config file, can\'t continue'
            exit 10
          end
          frontend_directives << "default_backend #{name}_backend"
          default_backend_found = true
        end

        # Defining service backend block
        backend_blocks[name] = []

        # Adding load-balancing algorithm if needed
        if hosts.count > 1
          backend_blocks[name] << (options['balance'] || 'roundrobin')
        end

        # Iterating on backend hosts
        current_index = 0
        hosts.each do |host|
          if host['custom_server']
              backend_blocks[name] << "server #{host['custom_server']}"
          else
              backend_blocks[name] << "server #{name}#{current_index+=1} #{host['host']}:#{host['port']}"
          end
        end

        # Adding custom options
        options['options'].each do |custom_option|
          backend_blocks[name] << custom_option
        end if options.has_key? 'options'
      end
    rescue
      # Something wrong happened while parsing service file, ignoring it.
      LOGGER.warn "Incorrect service file : #{File.basename(file)}"
    end
  end

  # Generating and writing final configuration files, for master...
  haproxy_config = compile_haproxy_config frontend_directives, backend_blocks
  File.write HAPROXY[:config], haproxy_config

  LOGGER.debug "Master HAProxy configuration file generated :\n\n#{haproxy_config}\n"

  LOGGER.info 'HAProxy configuration file created'
end

# Fork HAProxy and return its PID
def start_haproxy(config_file)
  LOGGER.info 'Starting up HAProxy...'
  pid = fork do
    exec "#{HAPROXY[:binary]} -f #{config_file} #{HAPROXY[:debug_flag] if SUPERWHALE[:debug]}"
  end
  LOGGER.info "Forked haproxy (#{config_file}) with PID : #{pid}"
  pid
end

# Entry point
def main
  LOGGER.warn "Starting up SuperWhale, version #{SUPERWHALE[:version]} !"

  # Creating haproxy configuration file
  create_haproxy_config

  # Starting master HAProxy process...
  haproxy_pid = start_haproxy HAPROXY[:config]

  # Wait 2 second for HAProxy to start up
  sleep 2

  # Watching for file changes, (blocking)
  FileWatcher.new([PATHS[:hosts], SUPERWHALE[:services]]).watch do
    LOGGER.warn 'File modification detected !'

    # Creating haproxy configuration file
    create_haproxy_config

    # Killing master
    LOGGER.info 'Killing haproxy'
    Process.kill 'USR1', haproxy_pid
    Process.wait haproxy_pid
    LOGGER.info 'Killing haproxy done'

    # Restarting master with new configuration
    LOGGER.info 'Restarting master'
    haproxy_pid = start_haproxy HAPROXY[:config]
  end
end

# Calling entry point
main
